# -*- coding: utf-8 -*-
"""Klasifikasi RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1emLXgti_bpxzoETz9T6fHVbFToaS-ZUS
"""

import numpy as np
import pandas as pd
from random import randrange
from collections import Counter
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

import warnings
warnings.filterwarnings('ignore')

def entropy(y):
    hist = np.bincount(y)
    ps = hist / len(y)
    return -np.sum([p * np.log2(p) for p in ps if p > 0])

class Node:

    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):
        self.feature = feature
        self.threshold = threshold
        self.left = left
        self.right = right
        self.value = value

    def is_leaf_node(self):
        return self.value is not None

class DecisionTree:

    def __init__(self, min_samples_split=2, max_depth=100, n_feats=None):
        self.min_samples_split = min_samples_split
        self.max_depth = max_depth
        self.n_feats = n_feats
        self.root = None

    def fit(self, X, y):
        self.n_feats = X.shape[1] if not self.n_feats else min(self.n_feats, X.shape[1])
        self.root = self._grow_tree(X, y)

    def predict(self, X):
        return np.array([self._traverse_tree(x, self.root) for x in X])

    def _grow_tree(self, X, y, depth=0):
        n_samples, n_features = X.shape
        n_labels = len(np.unique(y))

        # stopping criteria
        if (depth >= self.max_depth
                or n_labels == 1
                or n_samples < self.min_samples_split):
            leaf_value = self._most_common_label(y)
            return Node(value=leaf_value)

        feat_idxs = np.random.choice(n_features, self.n_feats, replace=False)

        # greedily select the best split according to information gain
        best_feat, best_thresh = self._best_criteria(X, y, feat_idxs)
        
        # grow the children that result from the split
        left_idxs, right_idxs = self._split(X[:, best_feat], best_thresh)
        left = self._grow_tree(X[left_idxs, :], y[left_idxs], depth+1)
        right = self._grow_tree(X[right_idxs, :], y[right_idxs], depth+1)
        return Node(best_feat, best_thresh, left, right)

    def _best_criteria(self, X, y, feat_idxs):
        best_gain = -1
        split_idx, split_thresh = None, None
        for feat_idx in feat_idxs:
            X_column = X[:, feat_idx]
            thresholds = np.unique(X_column)
            for threshold in thresholds:
                gain = self._information_gain(y, X_column, threshold)

                if gain > best_gain:
                    best_gain = gain
                    split_idx = feat_idx
                    split_thresh = threshold

        return split_idx, split_thresh

    def _information_gain(self, y, X_column, split_thresh):
        # parent loss
        parent_entropy = entropy(y)

        # generate split
        left_idxs, right_idxs = self._split(X_column, split_thresh)

        if len(left_idxs) == 0 or len(right_idxs) == 0:
            return 0

        # compute the weighted avg. of the loss for the children
        n = len(y)
        n_l, n_r = len(left_idxs), len(right_idxs)
        e_l, e_r = entropy(y[left_idxs]), entropy(y[right_idxs])
        child_entropy = (n_l / n) * e_l + (n_r / n) * e_r

        # information gain is difference in loss before vs. after split
        ig = parent_entropy - child_entropy
        return ig

    def _split(self, X_column, split_thresh):
        left_idxs = np.argwhere(X_column <= split_thresh).flatten()
        right_idxs = np.argwhere(X_column > split_thresh).flatten()
        return left_idxs, right_idxs

    def _traverse_tree(self, x, node):
        if node.is_leaf_node():
            return node.value

        if x[node.feature] <= node.threshold:
            return self._traverse_tree(x, node.left)
        return self._traverse_tree(x, node.right)

    def _most_common_label(self, y):
        counter = Counter(y)
        most_common = counter.most_common(1)[0][0]
        return most_common

def bootstrap_sample(X, y):
    n_samples = X.shape[0]
    idxs = np.random.choice(n_samples, n_samples, replace=True)
    return X[idxs], y[idxs]

def most_common_label(y):
    counter = Counter(y)
    most_common = counter.most_common(1)[0][0]
    return most_common


class RandomForest:
    
    def __init__(self, n_trees, max_depth,
                 min_samples_split=2, n_feats=None):
        self.n_trees = n_trees
        self.min_samples_split = min_samples_split
        self.max_depth = max_depth
        self.n_feats = n_feats
        self.trees = []

    def randforest_fit(self, X, y):
        self.trees = []
        for _ in range(self.n_trees):
            tree = DecisionTree(min_samples_split=self.min_samples_split,
                max_depth=self.max_depth, n_feats=self.n_feats)
            X_samp, y_samp = bootstrap_sample(X, y)
            tree.fit(X_samp, y_samp)
            self.trees.append(tree)

    def randforest_predict(self, X):
        tree_preds = np.array([tree.predict(X) for tree in self.trees])
        tree_preds = np.swapaxes(tree_preds, 0, 1)
        y_pred = [most_common_label(tree_pred) for tree_pred in tree_preds]
        return np.array(y_pred)

class cross_validaton():
  
  def __init__(self):
    pass

  # Split a dataset into k folds
  def cross_validation_split(self, dataset, folds):
    dataset_split = list()
    dataset_copy = list(dataset)
    fold_size = int(len(dataset) / folds)
    for i in range(folds):
      fold = list()
      while len(fold) < fold_size:
        index = randrange(len(dataset_copy))
        fold.append(dataset_copy.pop(index))
      dataset_split.append(fold)
    return dataset_split

  # test cross validation split
  # seed(10)
  # dataset = df_arr
  # folds = cross_validation_split(dataset, 4)
  # print(folds)

  def cross_validation_score(self, estimator, dataset, folds):
    self.estimator = estimator
    self.dataset = dataset
    self.folds = folds
    acuracy = np.array([])
    datafold = self.cross_validation_split(self.dataset, self.folds)
    datafold = np.asarray(datafold)

    print("K-Fold Cross-Validation")
    print("Dengan k = "+str(self.folds))
    print(" ")

    for i in range(self.folds):
      dataTest = np.array(datafold[i,:,:])
      dataTrain = np.delete(datafold, i, axis=0)
      dataTrain = np.array(dataTrain)
      dataTrain = dataTrain.reshape(-1,3)

      X_train = np.array(dataTrain[:, 0:2])
      y_train = np.array(dataTrain[:, 2])
      X_test = np.array(dataTest[:, 0:2])
      y_test = np.array(dataTest[:, 2])
      
      y_train = y_train.astype(np.int64)
      y_test = y_test.astype(np.int64)

      trainWeight = self.estimator.randforest_fit(X_train, y_train)
      predictY = self.estimator.randforest_predict(X_test)
      
      predictY = pd.DataFrame(predictY)
      y_test = pd.DataFrame(y_test)
      predictY = predictY.replace([0,1,2], ['AF','PVC','Normal'])
      y_test = y_test.replace([0,1,2], ['AF','PVC','Normal'])

      score = accuracy_score(y_test, predictY)
      acuracy = np.append(acuracy, score)

      print("Iterasi Ke-"+str(i+1)+" :")
      print(confusion_matrix(y_test, predictY))
      print(classification_report(y_test, predictY))


    print(acuracy)
    print("Mean Acuracy : ", acuracy.mean())

data = pd.read_csv('datasetFx1.csv')

dataset = data[['bpm', 'ibi', 'sdnn', 'sdsd', 'rmssd', 'pnn20', 'pnn50', 'hr_mad', 'sd1', 'sd2', 's', 'sd1/sd2', 'breathingrate','label']]
dataset.head(n=5)

df_norm = dataset[['bpm', 'ibi', 'sdnn', 'sdsd', 'rmssd', 'pnn20', 'pnn50', 'hr_mad', 'sd1', 'sd2', 's', 'sd1/sd2', 'breathingrate']].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
df_norm[:5]

# men-scaling dataset
scale_X = StandardScaler()
df_norm = scale_X.fit_transform(df_norm)
df_norm[:5]

from sklearn.decomposition import PCA
import plotly.express as px

pca = PCA()
pca.fit(df_norm)
exp_var_cumul = np.cumsum(pca.explained_variance_ratio_)


plt.figure(figsize=(10,5))
plt.grid(True,which='both')
plt.plot(exp_var_cumul)
plt.xlim(0,7,1)
plt.xlabel('Number of components')
plt.ylabel('Cumulative explained variance')

pecea_data = PCA(n_components=2)
pecea_data.fit(df_norm)
pecea_dataframeX = pecea_data.transform(df_norm)
pecea_dataframeX[:5]

df_norm_pca = pd.DataFrame(pecea_dataframeX)
df_norm_pca[:5]

diagnosa = data[['label']].replace(['AF','PVC','Normal'],[0,1,2])
diagnosa[:5]

df = pd.concat([df_norm_pca, diagnosa], axis=1)
df[:5]

df_arr = np.array(df)
df_arr[:5]

RFClassifier = RandomForest(n_trees=9, max_depth=3)

kfoldCV = cross_validaton()

kfoldCV.cross_validation_score(RFClassifier, dataset=df_arr, folds=5)

